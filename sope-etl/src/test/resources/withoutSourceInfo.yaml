udfs : {
     "add_2" : "(i : Int) => i + 2"
}
inputs: ["transactions", "product", "date", "dim_product"]
transformations :
    - input: "product"
      alias: "product_filtered"
      #sql: "select product_id, product_desc as product from product where product_desc != 'N.A.'"
      actions:
        - {type: filter, condition: "product_desc != 'N.A.'"}
        - {type: select, columns: [product_id, "product_desc as product"]}
    - input: "transactions"
      alias: "trxn_transformed"
      actions:
        - {type: rename, list: {id: "trxn_id" , loc: "location"}}
        - {type: transform, list: {location: "lower(location)", trxn_id: "concat(trxn_id, location)", rank: "RANK() OVER (PARTITION BY location order by date desc)"}}
        - {type: join, with: "product_filtered",  columns: ["product"] , join_type: inner}
        - {type: join, with: "date", columns: ["date"], join_type: inner}
        - {type: select_not, columns: ["location"]}
    - input: "transactions"
      alias: "grp_by"
      actions:
        - {type: "group_by", columns: ["product"], expr: "count(product) as p_cnt"}
        - {type: "order_by", columns: ["p_cnt:desc"]}
    - input: "transactions"
      alias: "grp_by_pivot"
      actions:
        - {type: "transform", list: {year: "year(date)"}}
        - {type: "group_by", columns: ["product"], pivot_column: "year",  expr: "count(product) as p_cnt"}
    - input : "product"
      alias: "final_dim_out"
      actions:
        - {type: yaml, yaml_file: "templates/scd_template.yaml", substitutions: ["product_key", ["product_id"], ["derived_attr"], ["last_updated_date"]], input_aliases: ["dim_product"], output_alias: "scd_result"}
    - input: "final_dim_out"
      alias: "distinct_test"
      actions:
         - {type: union, with: ["final_dim_out"]}
         - {type: distinct}
    - input: "transactions"
      alias: "drop_duplicate_test"
      actions:
         - {type: drop, columns: ["id"]}
         - {type: drop_duplicates, columns: ["product"]}
    - input: "product_filtered"
      alias: "product_filtered1" # Create new reference with new alias
      actions:
         - {type: select_not, columns: [] }
    - input: "product_filtered"
      alias: "aliasing_test"
      actions:
          - {type: join, with: "product_filtered1",  columns: ["product_id"] , join_type: inner, broadcast_hint: "right"}
          - {type: select, columns: ["product_filtered1.product", "product_filtered.product"]}
    - input: "dim_product"
      alias: "na_test"
      actions:
          - {type: select, columns: ["product_id as pid"]}
          - {type: transform, list: {pid: "pow(pid, 2)"}}
          - {type: join, with: "dim_product", condition: "product_id = pid", join_type: left, broadcast_hint: "left"}
          - {type: na, default_numeric: -1, default_string: "N/A", columns:["product_key", "product_desc"]}
    - input: "dim_product"
      alias: "limit_test"
      actions:
          - {type: limit, size: 2}
    - input: "transactions"
      alias: "unstruct_test"
      actions:
          - {type: transform, list: {"struct" : "struct(id, loc, product, date)"}}
          - {type: select, columns: ["struct"]}
          - {type: unstruct, column: "struct"}
    - input: "dim_product"
      alias: "intersect_test"
      actions:
          - {type: filter, condition: "product_id = -1 or product_id = 0"}
          - {type: intersect, with: ["dim_product"]}
    - input: "dim_product"
      alias: "except_test"
      actions:
          - {type: filter, condition: "product_id = -1 or product_id = 0"}
          - {type: except, with: ["dim_product"]}
    - alias: "transform_all_test"
      input: "transactions"
      actions:
          - {type: transform_all, function: "upper", suffix: "_new", columns: ["loc", "product"]}
    - alias: "transform_whole_table_test"
      input: "transactions"
      actions:
          - {type: transform_all, suffix: "_new", function: "upper"}
    - alias: "rename_all_test"
      input: "transactions"
      actions:
          - {type: rename_all, append: "_renamed"}
    - alias: "aggregate_test"
      input: "transactions"
      actions:
          - {type: join, with: "product_filtered",  columns: ["product"] , join_type: inner}
          - {type: aggregate, exprs: [max(id)]}
    - alias: "custom_udf_call_test"
      input: "transactions"
      actions:
      - {type: transform, list: {upper_loc : "custom_upper(loc)"}}
    - alias: "custom_transform_call_test"
      input: "transactions"
      actions:
      - {type: named_transform , name: "custom_transform"}
      - {type: transform, list: {add_2_to_id : add_2(id)}}
